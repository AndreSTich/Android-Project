fun main(){
    val rockPlanets = arrayOf<String>("Mercury", "Venus", "Earth", "Mars")
    val gasPlanets = arrayOf("Jupiter", "Saturn", "Uranus", "Neptune")
    val solarSystem = rockPlanets + gasPlanets
	println(solarSystem[0])
    val newSolarSystem = arrayOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
    
    val solarSystemL = listOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    println(solarSystemL.size) 
    println(solarSystemL[2])
    println(solarSystemL.get(2))
    println(solarSystemL.indexOf("Earth"))
    for (planet in solarSystemL) {
    println(planet)
    }
    val solarSystemML = mutableListOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    solarSystemML.add("Pluto")
    solarSystemML.add(3, "Theia")
    solarSystemML.removeAt(3)
    solarSystemML.remove("Theia")
    println(solarSystemML.contains("Pluto"))
    println("Future Moon" in solarSystem)
    
    val solarSystemS = mutableSetOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    println(solarSystemS.size)
    solarSystemS.add("Pluto")
    println(solarSystemS.size)
    solarSystemS.remove("Pluto")
    
    val solarSystemM = mutableMapOf(
    "Mercury" to 0,
    "Venus" to 0,
    "Earth" to 1,
    "Mars" to 2,
    "Jupiter" to 79,
    "Saturn" to 82,
    "Uranus" to 27,
    "Neptune" to 14
	)
	println(solarSystemM.size)
    solarSystemM["Pluto"] = 5
    println(solarSystemM.size)
    println(solarSystemM.get("Theia"))
    solarSystemM.remove("Pluto")
    solarSystemM["Jupiter"] = 78
	println(solarSystemM["Jupiter"])
}